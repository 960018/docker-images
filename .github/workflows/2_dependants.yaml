name: build dependants
run-name: build dependants

on:
    repository_dispatch:
        types: [ independent ]

env:
    BUILDS: "bun nginx node cron go"
    SIMILAR: "bun nginx cron node"
    EVENT: dependants
    LATEST_TAG: latest
    GO_NAME: go
    OWNER: ghcr.io/960018

jobs:

    build:
        strategy:
            matrix:
                arch: [ amd64, arm64 ]
                include:
                    -   arch: amd64
                        os: self-amd64
                    -   arch: arm64
                        os: self-arm64
        runs-on: ${{ matrix.os }}
        steps:
            -   name: login
                uses: docker/login-action@v3
                with:
                    registry: ghcr.io
                    username: ${{ github.repository_owner }}
                    password: ${{ secrets.GH_TOKEN }}
            -   name: checkout
                uses: actions/checkout@v4
            -   name: buildkit
                uses: docker/setup-buildx-action@v3
                with:
                    driver-opts: image=moby/buildkit:master-rootless
            -   name: download go
                id: godownload
                run: |
                    set -eux
                    GO_VERSION=$(curl -sSL https://go.dev/VERSION?m=text | head -n1 | sed 's/^go//' | xargs)
                    echo "GO_VERSION=$GO_VERSION" >> $GITHUB_OUTPUT
                    ARCH=${{ matrix.arch }}
                    URL="https://dl.google.com/go/go${GO_VERSION}.linux-${ARCH}.tar.gz"
                    
                    mkdir -p go-root
                    curl -sSL "$URL" | tar -xz -C go-root
            -   name: build go
                uses: docker/build-push-action@v6
                with:
                    context: .
                    file: ${{ env.GO_NAME }}.dockerfile
                    push: true
                    no-cache: ${{ github.event.client_payload.no_cache || false }}
                    pull: ${{ github.event.client_payload.no_cache || false }}
                    provenance: true
                    sbom: ${{ matrix.arch == 'amd64' }}
                    tags: ${{ env.OWNER }}/${{ env.GO_NAME }}:${{ matrix.arch }}
                    build-args: |
                        GO_VERSION=${{ steps.godownload.outputs.GO_VERSION }}
                        CACHE_BUSTER=${{ github.run_id }}
            -   name: build similar
                run: |
                    for build_name in ${{ env.SIMILAR }}; do
                        SBOM_FLAG=""
                        if [ "${{ matrix.arch }}" = "amd64" ]; then
                            SBOM_FLAG="--sbom=true"
                        fi
                    
                        NO_CACHE_FLAG=""
                        PULL_FLAG=""
                        if [ "$NO_CACHE" = "true" ]; then
                            NO_CACHE_FLAG="--no-cache"
                            PULL_FLAG="--pull"
                        fi
                    
                        docker buildx build \
                            --file ${build_name}.dockerfile \
                            --push \
                            --no-cache \
                            --provenance=true \
                            ${NO_CACHE_FLAG} \
                            ${PULL_FLAG} \
                            ${SBOM_FLAG} \
                            --tag ${{ env.OWNER }}/${build_name}:${{ matrix.arch }} \
                            --build-arg CACHE_BUSTER=${{ github.run_id }} \
                            .
                    done
            -   name: cleanup
                run: |
                    ls -la ./
                    rm -rf ./* || true
                    rm -rf ./.??* || true
                    ls -la ./
                    docker builder prune -af

    multiarch:
        runs-on: ubuntu-latest
        needs: [ build ]
        steps:
            -   name: login
                uses: docker/login-action@v3
                with:
                    registry: ghcr.io
                    username: ${{ github.repository_owner }}
                    password: ${{ secrets.GH_TOKEN }}
            -   name: hub login
                uses: docker/login-action@v3
                with:
                    registry: docker.io
                    username: ${{ secrets.DH_USERNAME }}
                    password: ${{ secrets.DH_TOKEN }}
            -   name: buildkit
                uses: docker/setup-buildx-action@v3
                with:
                    driver-opts: image=moby/buildkit:master-rootless
            -   name: multiarch
                run: |
                    for build_name in ${{ env.BUILDS }}; do
                        docker buildx imagetools create ${{ env.OWNER }}/${build_name}:amd64 ${{ env.OWNER }}/${build_name}:arm64 --tag ${{ env.OWNER }}/${build_name}:${{ env.LATEST_TAG }}
                    done
            -   name: dispatch
                if: ${{ github.event.client_payload.skip_dispatch != true }}
                uses: peter-evans/repository-dispatch@v3
                with:
                    event-type: ${{ env.EVENT }}
                    token: ${{ secrets.GH_TOKEN }}
                    repository: 960018/docker-images
                    client-payload: '{"no_cache": "${{ github.event.client_payload.no_cache || false }}"}'
