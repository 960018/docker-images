name: build independent images
run-name: build independent images

on:
    push:
        branches:
            - "master"
    repository_dispatch:
        types: [ trigger ]

env:
    EVENT: independent
    LATEST_TAG: latest
    OWNER: ghcr.io/960018
    SCRATCH_NAME: scratch
    DEBIAN_NAME: debian
    POSTGRES_NAME: postgres
    POSTGRES_VERSIONS: "13 14 15 16 17"

jobs:

    build:
        strategy:
            matrix:
                arch: [ amd64, arm64 ]
                include:
                    -   arch: amd64
                        os: self-amd64
                    -   arch: arm64
                        os: self-arm64
        runs-on: ${{ matrix.os }}
        steps:
            -   name: login
                uses: docker/login-action@v3
                with:
                    registry: ghcr.io
                    username: ${{ github.repository_owner }}
                    password: ${{ secrets.GH_TOKEN }}
            -   name: hub login
                uses: docker/login-action@v3
                with:
                    registry: docker.io
                    username: ${{ secrets.DH_USERNAME }}
                    password: ${{ secrets.DH_TOKEN }}
            -   name: checkout
                uses: actions/checkout@v4
            -   name: buildkit
                uses: docker/setup-buildx-action@v3
                with:
                    driver-opts: image=moby/buildkit:master-rootless
            -   name: dependencies
                run: |
                    docker pull debian:sid-slim
                    docker pull docker:28-dind-rootless
                    
                    for version in ${{ env.POSTGRES_VERSIONS }}; do
                        docker pull postgres:${version}-bookworm
                    done
            -   name: build scratch
                uses: docker/build-push-action@v6
                with:
                    context: .
                    file: ${{ env.SCRATCH_NAME }}.dockerfile
                    push: true
                    no-cache: true
                    provenance: true
                    sbom: ${{ matrix.arch == 'amd64' }}
                    tags: ${{ env.OWNER }}/${{ env.SCRATCH_NAME }}:${{ matrix.arch }}
            -   name: build debian
                uses: docker/build-push-action@v6
                with:
                    context: .
                    file: ${{ env.DEBIAN_NAME }}.dockerfile
                    push: true
                    pull: ${{ github.event.client_payload.no_cache || false }}
                    provenance: true
                    sbom: ${{ matrix.arch == 'amd64' }}
                    tags: ${{ env.OWNER }}/${{ env.DEBIAN_NAME }}:${{ matrix.arch }}
                    no-cache: ${{ github.event.client_payload.no_cache || false }}
                    build-args: |
                        CACHE_BUSTER=${{ github.run_id }}
            -   name: build postgres
                if: ${{ github.event.client_payload.skip_postgres != true }}
                env:
                    NO_CACHE: ${{ github.event.client_payload.no_cache || 'false' }}
                run: |
                    for version in ${{ env.POSTGRES_VERSIONS }}; do
                        SBOM_FLAG=""
                        if [ "${{ matrix.arch }}" = "amd64" ]; then
                            SBOM_FLAG="--sbom=true"
                        fi
                    
                        NO_CACHE_FLAG=""
                        PULL_FLAG=""
                        if [ "$NO_CACHE" = "true" ]; then
                            NO_CACHE_FLAG="--no-cache"
                            PULL_FLAG="--pull"
                        fi

                        docker buildx build \
                            --file ${{ env.POSTGRES_NAME }}.dockerfile \
                            --push \
                            --provenance=true \
                            ${NO_CACHE_FLAG} \
                            ${PULL_FLAG} \
                            ${SBOM_FLAG} \
                            --build-arg VERSION=${version} \
                            --build-arg CACHE_BUSTER=${{ github.run_id }} \
                            --tag ${{ env.OWNER }}/${{ env.POSTGRES_NAME }}:${version}-${{ matrix.arch }} \
                            .
                    done
            -   name: cleanup
                run: |
                    ls -la ./
                    rm -rf ./* || true
                    rm -rf ./.??* || true
                    ls -la ./
                    docker builder prune -af

    multiarch:
        runs-on: ubuntu-latest
        needs: [ build ]
        steps:
            -   name: login
                uses: docker/login-action@v3
                with:
                    registry: ghcr.io
                    username: ${{ github.repository_owner }}
                    password: ${{ secrets.GH_TOKEN }}
            -   name: buildkit
                uses: docker/setup-buildx-action@v3
                with:
                    driver-opts: image=moby/buildkit:master-rootless
            -   name: multiarch
                run: |
                    docker buildx imagetools create ${{ env.OWNER }}/${{ env.SCRATCH_NAME }}:amd64 ${{ env.OWNER }}/${{ env.SCRATCH_NAME }}:arm64 --tag ${{ env.OWNER }}/${{ env.SCRATCH_NAME }}:${{ env.LATEST_TAG }}
                    for version in ${{ env.POSTGRES_VERSIONS }}; do
                        docker buildx imagetools create ${{ env.OWNER }}/${{ env.POSTGRES_NAME }}:${version}-amd64 ${{ env.OWNER }}/${{ env.POSTGRES_NAME }}:${version}-arm64 --tag ${{ env.OWNER }}/${{ env.POSTGRES_NAME }}:${version}
                    done
                    docker buildx imagetools create ${{ env.OWNER }}/${{ env.DEBIAN_NAME }}:amd64 ${{ env.OWNER }}/${{ env.DEBIAN_NAME }}:arm64 --tag ${{ env.OWNER }}/${{ env.DEBIAN_NAME }}:${{ env.LATEST_TAG }}
            -   name: dispatch
                if: ${{ github.event.client_payload.skip_dispatch != true }}
                uses: peter-evans/repository-dispatch@v3
                with:
                    event-type: ${{ env.EVENT }}
                    token: ${{ secrets.GH_TOKEN }}
                    repository: 960018/docker-images
                    client-payload: '{"no_cache": "${{ github.event.client_payload.no_cache || false }}"}'
